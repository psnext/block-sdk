{"version":3,"file":"block-sdk.js","sources":["../node_modules/.pnpm/uuid@10.0.0/node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/.pnpm/uuid@10.0.0/node_modules/uuid/dist/esm-browser/rng.js","../node_modules/.pnpm/uuid@10.0.0/node_modules/uuid/dist/esm-browser/native.js","../node_modules/.pnpm/uuid@10.0.0/node_modules/uuid/dist/esm-browser/v4.js","../src/constants.ts","../src/resize-observer.ts","../src/utils.ts","../src/sdk.ts","../src/index.ts"],"sourcesContent":["import validate from './validate.js';\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  //\n  // Note to future-self: No, you can't remove the `toLowerCase()` call.\n  // REF: https://github.com/uuidjs/uuid/pull/677#issuecomment-1757351351\n  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();\n}\nfunction stringify(arr, offset = 0) {\n  var uuid = unsafeStringify(arr, offset);\n  // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n  return uuid;\n}\nexport default stringify;","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\n\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n  return getRandomValues(rnds8);\n}","var randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    offset = offset || 0;\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n    return buf;\n  }\n  return unsafeStringify(rnds);\n}\nexport default v4;","export const EVENT_NAMES = {\n  OUTPUT: \"output-event\",\n  INCOME: \"input-event\",\n  CONTROLLER: \"controller-event\",\n  HOST_DATA: \"host-data-event\",\n  ALX: \"alx-event\",\n};\n\nexport const IFRAME_BLOCK_ID_PREFIX = \"iframe:\";\n\nexport const BLOCK_URL_PARAMS = {\n  BLOCK_ID: \"block-id\",\n};\n\nexport const ALX_EVENT_ID = \"ALX\";\n\nexport const ALX_EVENT_TYPE = {\n  UPDATE_MESSAGE: \"UPDATE_MESSAGE\",\n  DISPLAY_MESSAGE: \"DISPLAY_MESSAGE\",\n};\n\nexport const CONTROLLER_TYPE = {\n  RESIZE: \"resize\",\n  READY: \"ready\",\n};\n","import BlockSdk from \"./sdk\";\nimport { CONTROLLER_TYPE } from \"./constants\";\n\nexport function domResizeObserver(el: HTMLDivElement, blockSdk: BlockSdk) {\n  const observer = new ResizeObserver(() => {\n    if (el) {\n      const { width, height } = el.getBoundingClientRect();\n      blockSdk.sendControllerMessage(\n        {\n          data: {\n            width,\n            height,\n          },\n        },\n        CONTROLLER_TYPE.RESIZE\n      );\n    }\n  });\n\n  if (el) {\n    observer.observe(el);\n  }\n}\n","import { v4 as uuidv4 } from \"uuid\";\nimport { EventName, AnyObj } from \"./types\";\nimport { domResizeObserver } from \"./resize-observer\";\n\nfunction isInIframe() {\n  return window.self !== window.top;\n}\n\ntype MessageToHost = {\n  senderBlockId: string;\n  type: EventName;\n  namespace?: string;\n  blockName: string;\n  source?: AnyObj;\n  payload?: AnyObj;\n  eventData?: AnyObj;\n};\n\nfunction sendMessageToHost(config: MessageToHost) {\n  const uuid = uuidv4();\n  const timestamp = Date.now();\n  window.parent.postMessage(\n    {\n      senderBlockId: config.senderBlockId,\n      type: config.type,\n      namespace: config.namespace || \"\",\n      eventData: {\n        version: 2,\n        eventId: uuid,\n        timestamp: timestamp,\n        playId: \"\",\n        source: {\n          blockId: config.senderBlockId,\n          blockName: config.blockName,\n          ...config.source,\n        },\n        payload: {\n          ...config.payload,\n          lastUpdatedTimestamp: timestamp,\n        },\n        ...config.eventData,\n      },\n    },\n    \"*\"\n  );\n}\n\nconst getUrlParams = (key: string) => {\n  const params = new URLSearchParams(window.location.search);\n  const value = params.get(key);\n  return value;\n};\n\nexport default {\n  isInIframe,\n  sendMessageToHost,\n  getUrlParams,\n  domResizeObserver,\n};\n","import Utils from \"./utils\";\nimport { BlockEventCallbacks, HostData } from \"./types\";\nimport {\n  ALX_EVENT_ID,\n  BLOCK_URL_PARAMS,\n  EVENT_NAMES,\n  ALX_EVENT_TYPE,\n  CONTROLLER_TYPE,\n} from \"./constants\";\n\nexport default class BlockSdk {\n  public blockName: string;\n  public blockEventCallbacks: BlockEventCallbacks;\n  public blockId: string = \"\";\n  public hostData: HostData = {};\n  constructor(blockName: string, blockEventCallbacks: BlockEventCallbacks) {\n    this.blockName = blockName;\n    this.blockEventCallbacks = blockEventCallbacks;\n    this._setupDefaultParams();\n    this._setupWindowEvents();\n  }\n  private _setupDefaultParams() {\n    const blockId = Utils.getUrlParams(BLOCK_URL_PARAMS.BLOCK_ID);\n    if (!blockId) {\n      throw new Error(\"Not a valid block iframe\");\n    }\n    if (blockId) {\n      this.blockId = blockId;\n    }\n  }\n  private _onPostMessageReceived(event: MessageEvent) {\n    if (event.data?.receivingBlockId === this.blockId) {\n      if (event.data?.type === EVENT_NAMES.INCOME) {\n        this.blockEventCallbacks.onIncomingData &&\n          this.blockEventCallbacks.onIncomingData(\n            event.data,\n            event.data.eventData\n          );\n      } else if (event.data?.type === EVENT_NAMES.CONTROLLER) {\n        this.blockEventCallbacks.onControllerData &&\n          this.blockEventCallbacks.onControllerData(\n            event.data,\n            event.data.eventData\n          );\n      } else if (event.data?.type === EVENT_NAMES.ALX) {\n        this.blockEventCallbacks.onAlxData &&\n          this.blockEventCallbacks.onAlxData(event.data, event.data.eventData);\n      } else if (event.data?.type === EVENT_NAMES.HOST_DATA) {\n        this.hostData = {\n          ...this.hostData,\n          ...event.data.eventData.payload,\n        };\n        this.blockEventCallbacks.onHostDataUpdate &&\n          this.blockEventCallbacks.onHostDataUpdate(event.data, this.hostData);\n      }\n    }\n  }\n  private _setupWindowEvents() {\n    window.addEventListener(\"message\", this._onPostMessageReceived.bind(this));\n  }\n  public static Utils = {\n    ...Utils,\n  };\n  public static register(\n    blockName: string,\n    blockEventCallbacks: BlockEventCallbacks\n  ) {\n    const instance = new BlockSdk(blockName, blockEventCallbacks);\n    instance.sendControllerMessage(null, CONTROLLER_TYPE.READY);\n    return instance;\n  }\n  public sendOutput(outputHandlerId: string, data: any) {\n    Utils.sendMessageToHost({\n      senderBlockId: this.blockId,\n      type: EVENT_NAMES.OUTPUT,\n      namespace: `${this.blockId}-${outputHandlerId}`,\n      blockName: this.blockName,\n      source: {\n        handleId: outputHandlerId,\n      },\n      payload: {\n        data,\n      },\n    });\n  }\n  public sendAlxMessage(\n    message: string,\n    type = ALX_EVENT_TYPE.DISPLAY_MESSAGE\n  ) {\n    Utils.sendMessageToHost({\n      senderBlockId: this.blockId,\n      type: EVENT_NAMES.ALX,\n      namespace: ALX_EVENT_ID,\n      blockName: this.blockName,\n      payload: {\n        data: message,\n      },\n      eventData: {\n        alxEventType: type,\n      },\n    });\n  }\n  public resizeObserver(el: HTMLDivElement) {\n    Utils.domResizeObserver(el, this);\n  }\n  public sendControllerMessage(data: any, controllerType: string) {\n    Utils.sendMessageToHost({\n      senderBlockId: this.blockId,\n      type: EVENT_NAMES.CONTROLLER,\n      blockName: this.blockName,\n      payload: {\n        ...data,\n      },\n      eventData: {\n        controllerType,\n      },\n    });\n  }\n}\n","import BlockSdk from \"./sdk\";\n\n(function (Module) {\n  Module.BlockSdk = BlockSdk;\n})(window);\n"],"names":["byteToHex","i","unsafeStringify","arr","offset","getRandomValues","rnds8","rng","randomUUID","native","v4","options","buf","rnds","EVENT_NAMES","BLOCK_URL_PARAMS","ALX_EVENT_ID","ALX_EVENT_TYPE","CONTROLLER_TYPE","domResizeObserver","el","blockSdk","observer","width","height","isInIframe","sendMessageToHost","config","uuid","uuidv4","timestamp","getUrlParams","key","Utils","_BlockSdk","blockName","blockEventCallbacks","__publicField","blockId","event","_a","_b","_c","_d","_e","instance","outputHandlerId","data","message","type","controllerType","BlockSdk","Module"],"mappings":"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","x_google_ignoreList":[0,1,2,3]}